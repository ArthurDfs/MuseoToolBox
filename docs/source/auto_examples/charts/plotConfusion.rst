.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_charts_plotConfusion.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_charts_plotConfusion.py:


Plot confusion matrix
========================================================

Plot confusion matrix from Cross-Validation, with F1 as subplot.



Import librairies
-------------------------------------------



.. code-block:: python

    from museotoolbox.learnTools import learnAndPredict
    from museotoolbox.crossValidation import RandomCV
    from museotoolbox.charts import plotConfusionMatrix
    from museotoolbox import datasets
    from sklearn.ensemble import RandomForestClassifier







Load HistoricalMap dataset
-------------------------------------------



.. code-block:: python


    raster,vector = datasets.getHistoricalMap()
    field = 'Class'






Create CV
-------------------------------------------



.. code-block:: python

    RS50 = RandomCV(valid_size=0.5,n_splits=2,
                    random_state=12,verbose=False)







Initialize Random-Forest
---------------------------



.. code-block:: python


    classifier = RandomForestClassifier()







Start learning
---------------------------



.. code-block:: python


    LAP = learnAndPredict()
    LAP.learnFromRaster(raster,vector,field,cv=RS50,
                        classifier=classifier,param_grid=dict(n_estimators=[100,200]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting 2 folds for each of 2 candidates, totalling 4 fits
    best n_estimators : 200


Get kappa from each fold
---------------------------



.. code-block:: python

  
    for stats in LAP.getStatsFromCV(confusionMatrix=False,kappa=True):
        print(stats['kappa'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.942803254705
    0.941748417597


Get each confusion matrix from folds
-----------------------------------------------



.. code-block:: python

    cms = []
    for stats in LAP.getStatsFromCV(confusionMatrix=True):
        cms.append(stats['confusionMatrix'])
        print(stats['confusionMatrix'])
    




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[3679   79    2   11    0]
     [  68 1066    1   12    0]
     [   0    0 1140    0    0]
     [   9   20    3  231    0]
     [   4    0    0    0    0]]
    [[3691   69    1   10    0]
     [  83 1047    0   16    0]
     [   2    0 1137    0    0]
     [  10   17    1  234    0]
     [   4    0    0    0    0]]


Plot confusion matrix
-----------------------------------------------



.. code-block:: python

    
    import numpy as np
    meanCM = np.mean(cms,axis=0).astype(np.int16)
    pltCM = plotConfusionMatrix(meanCM.T) # Translate for Y = prediction and X = truth
    pltCM.addText()
    pltCM.colorDiag()




.. image:: /auto_examples/charts/images/sphx_glr_plotConfusion_001.png
    :class: sphx-glr-single-img




Plot confusion matrix and normalize per class
-----------------------------------------------



.. code-block:: python

    from matplotlib.pyplot import cm as colorMap
    meanCMnorm = meanCM.astype('float') / meanCM.sum(axis=1)[:, np.newaxis]*100
    pltCM = plotConfusionMatrix(meanCMnorm.astype(int).T)
    pltCM.addText(alpha_zero=0.8) # in order to hide a little zero values
    pltCM.addXlabels(['One','Two','3','Four','Five!'],rotation=90,position='bottom')
    pltCM.addYlabels(['','','','','']) # to remove labels
    pltCM.colorDiag(diagColor=colorMap.Blues,matrixColor=colorMap.YlOrBr)



.. image:: /auto_examples/charts/images/sphx_glr_plotConfusion_002.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  5.906 seconds)


.. _sphx_glr_download_auto_examples_charts_plotConfusion.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plotConfusion.py <plotConfusion.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plotConfusion.ipynb <plotConfusion.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
