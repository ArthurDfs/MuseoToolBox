.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_charts_plotConfusion.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_charts_plotConfusion.py:


Plot confusion matrix
========================================================

Plot confusion matrix from Cross-Validation, with F1 as subplot.


Import librairies
-------------------------------------------


.. code-block:: default

    from museotoolbox.learn_tools import learnAndPredict
    from museotoolbox.cross_validation import RandomStratifiedKFold
    from museotoolbox.charts import plotConfusionMatrix
    from museotoolbox import datasets
    from sklearn.ensemble import RandomForestClassifier







Load HistoricalMap dataset
-------------------------------------------


.. code-block:: default


    raster,vector = datasets.historicalMap(low_res=True)
    field = 'Class'






Create CV
-------------------------------------------


.. code-block:: default

    RSKF = RandomStratifiedKFold(n_splits=2,
                    random_state=12,verbose=False)







Initialize Random-Forest
---------------------------


.. code-block:: default


    classifier = RandomForestClassifier()







Start learning
---------------------------


.. code-block:: default


    LAP = learnAndPredict()
    LAP.learnFromRaster(raster,vector,field,cv=RSKF,
                        classifier=classifier,param_grid=dict(n_estimators=[100,200]))







Get kappa from each fold
---------------------------


.. code-block:: default

  
    for stats in LAP.getStatsFromCV(confusionMatrix=False,kappa=True):
        print(stats['kappa'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.9182291830686276
    0.8756478724189698


Get each confusion matrix from folds
-----------------------------------------------


.. code-block:: default

    cms = []
    for stats in LAP.getStatsFromCV(confusionMatrix=True):
        cms.append(stats['confusionMatrix'])
        print(stats['confusionMatrix'])
    




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[924  17   0   1   0]
     [ 30 245   0  11   0]
     [  0   0 284   0   0]
     [  1  10   1  54   0]
     [  0   1   0   0   0]]
    [[915  23   0   4   0]
     [ 47 230   0   9   0]
     [  0   0 283   1   0]
     [  1  18   1  46   0]
     [  0   0   0   1   0]]


Plot confusion matrix
-----------------------------------------------


.. code-block:: default

    
    import numpy as np
    meanCM = np.mean(cms,axis=0).astype(np.int16)
    pltCM = plotConfusionMatrix(meanCM.T) # Translate for Y = prediction and X = truth
    pltCM.addText()
    pltCM.colorDiag()


.. image:: /auto_examples/charts/images/sphx_glr_plotConfusion_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.948 seconds)


.. _sphx_glr_download_auto_examples_charts_plotConfusion.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plotConfusion.py <plotConfusion.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plotConfusion.ipynb <plotConfusion.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
