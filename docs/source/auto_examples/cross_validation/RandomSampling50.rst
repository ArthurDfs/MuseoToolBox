.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_cross_validation_RandomSampling50.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_cross_validation_RandomSampling50.py:


Stratified-K-Fold
======================================================

This example shows how to make a Random Sampling with 
50% for each class.


Import librairies
-------------------------------------------


.. code-block:: default


    from museotoolbox.cross_validation import RandomStratifiedKFold
    from museotoolbox import datasets,raster_tools,vector_tools







Load HistoricalMap dataset
-------------------------------------------


.. code-block:: default


    raster,vector = datasets.historicalMap(low_res=True)
    field = 'Class'
    y = vector_tools.readValuesFromVector(vector,field)







Create CV
-------------------------------------------


.. code-block:: default


    SKF = RandomStratifiedKFold(n_splits=2,n_repeats=2,
                    random_state=12,verbose=False)
    for tr,vl in SKF.split(X=None,y=y):
        print(tr,vl)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 2  3  8  6  9 15 16 12 13] [ 0  7  1  4  5 14 10 11]
    [ 0  1  7  4  5 14 15 10 11] [ 3  2  8  9  6 16 12 13]
    [ 0  3  7  4  9 14 16 12 13] [ 8  1  2  5  6 15 10 11]
    [ 1  2  8  5  6 14 15 10 11] [ 7  3  0  9  4 16 12 13]


.. note::
   Split is made to generate each fold


.. code-block:: default


    # Show label

    for tr,vl in SKF.split(X=None,y=y):
        print(y[tr],y[vl])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 1 1 2 2 3 3 4 5] [1 1 1 2 2 3 4 5]
    [1 1 1 2 2 3 3 4 5] [1 1 1 2 2 3 4 5]
    [1 1 1 2 2 3 3 4 5] [1 1 1 2 2 3 4 5]
    [1 1 1 2 2 3 3 4 5] [1 1 1 2 2 3 4 5]


.. note::
   The first one is made with polygon only.
   When learning/predicting, all pixels will be taken in account
   TO generate a full X and y labels, extract samples from ROI


.. code-block:: default


    X,y=raster_tools.getSamplesFromROI(raster,vector,field)

    for tr,vl in SKF.split(X,y):
        print(tr,vl)
        print(tr.shape,vl.shape)
        




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [   0    1    2 ... 2961 3160 3161] [ 999  398 2667 ... 2843 2842 3023]
    (1583,) (1579,)
    [   3    4    5 ... 2960 3023 3160] [1093 2607 2672 ... 2834  715 3161]
    (1583,) (1579,)
    [   1    2    4 ... 2961 3023 3161] [1477   51 1805 ... 2883 2833 3160]
    (1583,) (1579,)
    [   0    3    6 ... 2960 3023 3160] [2331 2317  999 ...  391  508 3161]
    (1583,) (1579,)


Plot example


.. code-block:: default

    import numpy as np
    from matplotlib import pyplot as plt
    plt.scatter(np.random.rand(30),np.random.rand(30),s=100)
    plt.scatter(np.random.rand(30),np.random.rand(30),s=100)
    plt.axis('off')
    plt.show()



.. image:: /auto_examples/cross_validation/images/sphx_glr_RandomSampling50_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.221 seconds)


.. _sphx_glr_download_auto_examples_cross_validation_RandomSampling50.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: RandomSampling50.py <RandomSampling50.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: RandomSampling50.ipynb <RandomSampling50.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
