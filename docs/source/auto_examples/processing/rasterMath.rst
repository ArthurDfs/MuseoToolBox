.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_processing_rasterMath.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_processing_rasterMath.py:


Basics to use rasterMath
===============================================================

Compute substract and addition between two raster bands.


Import librairies
-------------------------------------------


.. code-block:: default


    from museotoolbox.processing import RasterMath
    from museotoolbox import datasets
    import numpy as np






Load HistoricalMap dataset
-------------------------------------------


.. code-block:: default


    raster,vector = datasets.load_historical_data()







Initialize rasterMath with raster
------------------------------------


.. code-block:: default


    rM = RasterMath(raster)

    print(rM.get_random_block())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 15
    [[104  84  59]
     [197 177 152]
     [209 189 164]
     ...
     [141 149 125]
     [139 149 125]
     [135 145 121]]


Let's suppose you want compute the difference between blue and green band.
I suggest you to define type in numpy array to save space while creating the raster!


.. code-block:: default


    X = rM.get_random_block()

 
    sub = lambda X : np.array((X[:,0]-X[:,1])).astype(np.int16) 


    rM.add_function(sub,out_image='/tmp/sub_lambda.tif')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using datatype from numpy table : int16.
    Detected 1 band for function <lambda>.


Use a python function to use arguments
----------------------------------------


.. code-block:: default


    def sub(X,band1=0,band2=1):
        outX = np.array((X[:,band1]-X[:,band2])).astype(np.int16)
        return outX







We can add keyword argument in the addFunction.
This function is going to substract band2 from band 1 


.. code-block:: default

    import time
    t=time.time()
    rM = RasterMath(raster)
    rM.add_function(sub,out_image='/tmp/sub.tif',band1=1,band2=0,compress='high')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 15
    Using datatype from numpy table : int16.
    Detected 1 band for function sub.


Run the script


.. code-block:: default


    rM.run()
    print(time.time()-t)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    rasterMath... [........................................]0%    rasterMath... [##......................................]6%    rasterMath... [#####...................................]13%    rasterMath... [########................................]20%    rasterMath... [##########..............................]26%    rasterMath... [#############...........................]33%    rasterMath... [################........................]40%    rasterMath... [##################......................]46%    rasterMath... [#####################...................]53%    rasterMath... [########################................]60%    rasterMath... [##########################..............]66%    rasterMath... [#############################...........]73%    rasterMath... [################################........]80%    rasterMath... [##################################......]86%    rasterMath... [#####################################...]93%    rasterMath... [########################################]100%
    Saved /tmp/sub.tif using function sub
    0.40149641036987305


Plot result


.. code-block:: default


    #from osgeo import gdal
    #from matplotlib import pyplot as plt 
    #src = gdal.Open('/tmp/sub.tif')
    #plt.imshow(src.ReadAsArray())







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.463 seconds)


.. _sphx_glr_download_auto_examples_processing_rasterMath.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: rasterMath.py <rasterMath.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: rasterMath.ipynb <rasterMath.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
