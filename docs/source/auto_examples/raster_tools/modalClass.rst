.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_raster_tools_modalClass.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_raster_tools_modalClass.py:


Modal class and number of agreements
===============================================================

Create a raster with the modal class and the number of agreements.



Import librairies
-------------------------------------------



.. code-block:: python


    import museotoolbox as mtb
    from scipy import stats
    import numpy as np






Load HistoricalMap dataset
-------------------------------------------



.. code-block:: python


    raster,vector = mtb.datasets.historicalMap()







Initialize rasterMath with raster
-----------------------------------------



.. code-block:: python


    ########
    # In case you want to add a mask
    mask = '/tmp/maskFromPolygons.tif'
    mtb.raster_tools.rasterMaskFromVector(vector,raster,mask,invert=False)

    rM = mtb.raster_tools.rasterMath(raster,inMaskRaster=mask)

    print(rM.getRandomBlock())



.. code-block:: pytb

    Traceback (most recent call last):
      File "/mnt/DATA/lib/MuseoToolBox/examples/raster_tools/modalClass.py", line 34, in <module>
        print(rM.getRandomBlock())
      File "/mnt/DATA/lib/MuseoToolBox/museotoolbox/raster_tools/__init__.py", line 795, in getRandomBlock
        tmp = self._manageMaskFor2D(tmp)
      File "/mnt/DATA/lib/MuseoToolBox/museotoolbox/raster_tools/__init__.py", line 865, in _manageMaskFor2D
        X = self._returnUnmaskXed(X)
    AttributeError: 'rasterMath' object has no attribute '_returnUnmaskXed'




Let's suppose you want compute the modal classification between several predictions
The first band will be the most predicted class, and the second the number of times it has been predicted.



.. code-block:: python



    x = rM.getRandomBlock()

    def modalClass(x):
        tmp = stats.mode(x, axis=-1)
        tmpStack = np.column_stack((tmp[0], tmp[1])).astype(np.int16)
        return tmpStack


    rM.addFunction(modalClass,outRaster='/tmp/modal.tif',outNoData=0)


Run the script



.. code-block:: python


    rM.run()


Plot result



.. code-block:: python


    import gdal
    from matplotlib import pyplot as plt 

    src = gdal.Open('/tmp/modal.tif')
    plt.imshow(src.ReadAsArray()[0,:,:])

**Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_raster_tools_modalClass.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: modalClass.py <modalClass.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: modalClass.ipynb <modalClass.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
