.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_raster_tools_rasterMath.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_raster_tools_rasterMath.py:


Basics to use rasterMath
===============================================================

Compute substract and addition between two raster bands.


Import librairies
-------------------------------------------


.. code-block:: default


    from museotoolbox.raster_tools import rasterMath
    from museotoolbox import datasets
    import numpy as np






Load HistoricalMap dataset
-------------------------------------------


.. code-block:: default


    raster,vector = datasets.historicalMap()







Initialize rasterMath with raster
------------------------------------


.. code-block:: default


    rM = rasterMath(raster)

    print(rM.getRandomBlock())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 15
    [[178 154 120]
     [196 172 138]
     [206 182 148]
     ...
     [ 94  85  68]
     [174 161 144]
     [196 183 164]]


Let's suppose you want compute the difference between blue and green band
I suggest you to define type in numpy array to save space while creating the raster!


.. code-block:: default


    X = rM.getRandomBlock()
 
    sub = lambda X : np.array((X[:,0]-X[:,1])).astype(np.int64) 







You can use a standard python function too :

def sub(X):
    return np.array((X[:,0]-X[:,1])).astype(np.int64) 


.. code-block:: default


    rM.addFunction(sub,outRaster='/tmp/sub.tif')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Warning : Numpy type int64 is not recognized by gdal. Will use int32 instead
    Using datatype from numpy table : int64.
    Detected 1 band for function <lambda>.


Run the script


.. code-block:: default


    rM.run()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    rasterMath... [........................................]0%    rasterMath... [##......................................]6%    rasterMath... [#####...................................]13%    rasterMath... [########................................]20%    rasterMath... [##########..............................]26%    rasterMath... [#############...........................]33%    rasterMath... [################........................]40%    rasterMath... [##################......................]46%    rasterMath... [#####################...................]53%    rasterMath... [########################................]60%    rasterMath... [##########################..............]66%    rasterMath... [#############################...........]73%    rasterMath... [################################........]80%    rasterMath... [##################################......]86%    rasterMath... [#####################################...]93%    rasterMath... [########################################]100%
    Saved /tmp/sub.tif using function <lambda>


Plot result


.. code-block:: default


    import gdal
    from matplotlib import pyplot as plt 

    src = gdal.Open('/tmp/sub.tif')
    plt.imshow(src.ReadAsArray())



.. image:: /auto_examples/raster_tools/images/sphx_glr_rasterMath_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.729 seconds)


.. _sphx_glr_download_auto_examples_raster_tools_rasterMath.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: rasterMath.py <rasterMath.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: rasterMath.ipynb <rasterMath.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
