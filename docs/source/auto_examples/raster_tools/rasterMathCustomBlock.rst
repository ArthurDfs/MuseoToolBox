.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_raster_tools_rasterMathCustomBlock.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_raster_tools_rasterMathCustomBlock.py:


rasterMath with custom block size (and with 3 dimensions)
===============================================================

Tips to use rasterMath by defining its block size and to receive
a full block (not a array with one pixel per row.)


Import librairies
-------------------------------------------


.. code-block:: default


    from museotoolbox.raster_tools import rasterMath
    from museotoolbox import datasets
    from matplotlib import pyplot as plt
    import numpy as np






Load HistoricalMap dataset
-------------------------------------------


.. code-block:: default


    raster,vector = datasets.historicalMap()







Initialize rasterMath with raster
------------------------------------


.. code-block:: default


    # Set return2d to False to have full block size (not one pixel per row)

    rM = rasterMath(raster,return_3d=True)

    print(rM.getRandomBlock().shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 15
    (54, 256, 3)


Comparing different block size (%, fixed, full block)
-------------------------------------------------------

You can define block by percentage of the whole width/height


.. code-block:: default


    rM.customBlockSize(1/2,1/2) 
    print(rM.getRandomBlock().shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 4
    (283, 526, 3)


Or by fixed window 


.. code-block:: default


    rM.customBlockSize(50,100) # width divided every 50 pixel and height every 100
    print(rM.getRandomBlock().shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 132
    (100, 50, 3)


To have the full image (one block)


.. code-block:: default


    rM.customBlockSize(-1,-1) # to have the full image





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 1


To have block width divided by 4 and height by 2


.. code-block:: default


    rM.customBlockSize(1/4,1/2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 8


Plot blocks


.. code-block:: default


    fig=plt.figure(figsize=(12,6),dpi=150)

    for idx,tile in enumerate(rM.readBlockPerBlock()):

        fig.add_subplot(2,4,idx+1)
        plt.imshow(tile)

        plt.title('block %s' %(idx+1))
        plt.imshow(tile)
    plt.show()



.. image:: /auto_examples/raster_tools/images/sphx_glr_rasterMathCustomBlock_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.030 seconds)


.. _sphx_glr_download_auto_examples_raster_tools_rasterMathCustomBlock.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: rasterMathCustomBlock.py <rasterMathCustomBlock.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: rasterMathCustomBlock.ipynb <rasterMathCustomBlock.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
