.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_raster_tools_rasterMath_twoRasters.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_raster_tools_rasterMath_twoRasters.py:


rasterMath with several rasters as inputs
===============================================================

Compute substract and addition between two raster bands.


Import librairies
-------------------------------------------



.. code-block:: python


    from museotoolbox.raster_tools import rasterMath,rasterMaskFromVector
    from museotoolbox import datasets
    import numpy as np






Load HistoricalMap dataset
-------------------------------------------



.. code-block:: python


    raster,vector = datasets.historicalMap()







Initialize rasterMath with raster
------------------------------------


If invert is set to True, it means polygons will be set to nodata



.. code-block:: python


    rasterMaskFromVector(vector,raster,'/tmp/mask.tif',invert=True)
    rM = rasterMath(raster,inMaskRaster='/tmp/mask.tif',return_3d=False)
    rM.addInputRaster(raster)

    print('Number of rasters : '+str(len(rM.getRandomBlock())))




.. code-block:: pytb

    Traceback (most recent call last):
      File "/mnt/DATA/lib/MuseoToolBox/examples/raster_tools/rasterMath_twoRasters.py", line 33, in <module>
        print('Number of rasters : '+str(len(rM.getRandomBlock())))
      File "/mnt/DATA/lib/MuseoToolBox/museotoolbox/raster_tools/__init__.py", line 795, in getRandomBlock
        tmp = self._manageMaskFor2D(tmp)
      File "/mnt/DATA/lib/MuseoToolBox/museotoolbox/raster_tools/__init__.py", line 863, in _manageMaskFor2D
        X = [self._returnUnmaskXed(x) for x in X]
      File "/mnt/DATA/lib/MuseoToolBox/museotoolbox/raster_tools/__init__.py", line 863, in <listcomp>
        X = [self._returnUnmaskXed(x) for x in X]
    AttributeError: 'rasterMath' object has no attribute '_returnUnmaskXed'




Let's suppose you want compute the substractino between the blue and green band of two inputs
I suggest you to define type in numpy array to save space while creating the raster!



.. code-block:: python


    x = rM.getRandomBlock()

    def sub(x):
        return np.array((x[0][...,0]-x[1][...,2])).astype(np.uint8)

    rM.addFunction(sub,outRaster='/tmp/sub_2inputs.tif')


Run the script



.. code-block:: python


    rM.run()


Plot result



.. code-block:: python


    import gdal
    from matplotlib import pyplot as plt 

    src = gdal.Open('/tmp/sub_2inputs.tif')
    arr = src.ReadAsArray()
    arr = np.where(arr==0,np.nan,arr)
    plt.imshow(arr)

**Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_raster_tools_rasterMath_twoRasters.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: rasterMath_twoRasters.py <rasterMath_twoRasters.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: rasterMath_twoRasters.ipynb <rasterMath_twoRasters.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
